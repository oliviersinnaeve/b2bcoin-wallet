/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AddressBalance } from '../model/addressBalance';
import { BlockOrTransactionRequest } from '../model/blockOrTransactionRequest';
import { BlockOrTransactionResponse } from '../model/blockOrTransactionResponse';
import { BlockWrapper } from '../model/blockWrapper';
import { Payment } from '../model/payment';
import { PaymentInput } from '../model/paymentInput';
import { RestResourceInfo } from '../model/restResourceInfo';
import { Success } from '../model/success';
import { TransactionsResponse } from '../model/transactionsResponse';
import { UserAddress } from '../model/userAddress';
import { WalletCoin } from '../model/walletCoin';
import { WalletKeys } from '../model/walletKeys';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class WalletResourceService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Find the component fragment by ID
     * Returns the fragments for the given ID. It&#39;s a composite ID, so it is used as criteria
     * @param coinType coinType
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createAddressUsingGET(coinType: string, observe?: 'body', reportProgress?: boolean): Observable<UserAddress>;
    public createAddressUsingGET(coinType: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserAddress>>;
    public createAddressUsingGET(coinType: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserAddress>>;
    public createAddressUsingGET(coinType: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (coinType === null || coinType === undefined) {
            throw new Error('Required parameter coinType was null or undefined when calling createAddressUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<UserAddress>(`${this.basePath}/wallet/createAddress/${encodeURIComponent(String(coinType))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a payment
     * Create a payment and return the hash of it.
     * @param coinType coinType
     * @param input input
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createPaymentUsingPOST(coinType: string, input: PaymentInput, observe?: 'body', reportProgress?: boolean): Observable<Payment>;
    public createPaymentUsingPOST(coinType: string, input: PaymentInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Payment>>;
    public createPaymentUsingPOST(coinType: string, input: PaymentInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Payment>>;
    public createPaymentUsingPOST(coinType: string, input: PaymentInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (coinType === null || coinType === undefined) {
            throw new Error('Required parameter coinType was null or undefined when calling createPaymentUsingPOST.');
        }
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling createPaymentUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<Payment>(`${this.basePath}/wallet/createPayment/${encodeURIComponent(String(coinType))}`,
            input,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find the component fragment by ID
     * Returns the fragments for the given ID. It&#39;s a composite ID, so it is used as criteria
     * @param coinType coinType
     * @param userAddress userAddress
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteAddressUsingPOST(coinType: string, userAddress: UserAddress, observe?: 'body', reportProgress?: boolean): Observable<Success>;
    public deleteAddressUsingPOST(coinType: string, userAddress: UserAddress, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Success>>;
    public deleteAddressUsingPOST(coinType: string, userAddress: UserAddress, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Success>>;
    public deleteAddressUsingPOST(coinType: string, userAddress: UserAddress, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (coinType === null || coinType === undefined) {
            throw new Error('Required parameter coinType was null or undefined when calling deleteAddressUsingPOST.');
        }
        if (userAddress === null || userAddress === undefined) {
            throw new Error('Required parameter userAddress was null or undefined when calling deleteAddressUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<Success>(`${this.basePath}/wallet/deleteAddress/${encodeURIComponent(String(coinType))}`,
            userAddress,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find the component fragment by ID
     * Returns the fragments for the given ID. It&#39;s a composite ID, so it is used as criteria
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAddressesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<UserAddress>>;
    public getAddressesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<UserAddress>>>;
    public getAddressesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<UserAddress>>>;
    public getAddressesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<UserAddress>>(`${this.basePath}/wallet/getAddresses`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find the component fragment by ID
     * Returns the fragments for the given ID. It&#39;s a composite ID, so it is used as criteria
     * @param userAddress userAddress
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBalanceUsingPOST1(userAddress: UserAddress, observe?: 'body', reportProgress?: boolean): Observable<AddressBalance>;
    public getBalanceUsingPOST1(userAddress: UserAddress, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AddressBalance>>;
    public getBalanceUsingPOST1(userAddress: UserAddress, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AddressBalance>>;
    public getBalanceUsingPOST1(userAddress: UserAddress, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userAddress === null || userAddress === undefined) {
            throw new Error('Required parameter userAddress was null or undefined when calling getBalanceUsingPOST1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<AddressBalance>(`${this.basePath}/wallet/getBalance`,
            userAddress,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find the block or transaction in the coin daemon by hash
     * Returns the block or the transaction for the given hash.
     * @param coinType coinType
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBlockOrTransactionUsingPOST(coinType: string, request: BlockOrTransactionRequest, observe?: 'body', reportProgress?: boolean): Observable<BlockOrTransactionResponse>;
    public getBlockOrTransactionUsingPOST(coinType: string, request: BlockOrTransactionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BlockOrTransactionResponse>>;
    public getBlockOrTransactionUsingPOST(coinType: string, request: BlockOrTransactionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BlockOrTransactionResponse>>;
    public getBlockOrTransactionUsingPOST(coinType: string, request: BlockOrTransactionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (coinType === null || coinType === undefined) {
            throw new Error('Required parameter coinType was null or undefined when calling getBlockOrTransactionUsingPOST.');
        }
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling getBlockOrTransactionUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<BlockOrTransactionResponse>(`${this.basePath}/wallet/getBlockOrTransaction/${encodeURIComponent(String(coinType))}`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get supported coins
     * Returns the coins supported by the wallet
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCoinTypesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<WalletCoin>>;
    public getCoinTypesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<WalletCoin>>>;
    public getCoinTypesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<WalletCoin>>>;
    public getCoinTypesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<WalletCoin>>(`${this.basePath}/wallet/getCoinTypes`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find the component fragment by ID
     * Returns the fragments for the given ID. It&#39;s a composite ID, so it is used as criteria
     * @param coinType coinType
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLastBlockUsingGET(coinType: string, observe?: 'body', reportProgress?: boolean): Observable<BlockWrapper>;
    public getLastBlockUsingGET(coinType: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BlockWrapper>>;
    public getLastBlockUsingGET(coinType: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BlockWrapper>>;
    public getLastBlockUsingGET(coinType: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (coinType === null || coinType === undefined) {
            throw new Error('Required parameter coinType was null or undefined when calling getLastBlockUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<BlockWrapper>(`${this.basePath}/wallet/getLastBlock/${encodeURIComponent(String(coinType))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Is the Service running ?
     * Returns if the service runs or not. Without other exceptions in mind, just running
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getResourceInfoUsingGET1(observe?: 'body', reportProgress?: boolean): Observable<RestResourceInfo>;
    public getResourceInfoUsingGET1(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RestResourceInfo>>;
    public getResourceInfoUsingGET1(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RestResourceInfo>>;
    public getResourceInfoUsingGET1(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<RestResourceInfo>(`${this.basePath}/wallet/info`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the spendKeys for a userAddress
     * Returns the public view key and the private spend key
     * @param userAddress userAddress
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSpendKeysUsingPOST(userAddress: UserAddress, observe?: 'body', reportProgress?: boolean): Observable<WalletKeys>;
    public getSpendKeysUsingPOST(userAddress: UserAddress, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WalletKeys>>;
    public getSpendKeysUsingPOST(userAddress: UserAddress, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WalletKeys>>;
    public getSpendKeysUsingPOST(userAddress: UserAddress, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userAddress === null || userAddress === undefined) {
            throw new Error('Required parameter userAddress was null or undefined when calling getSpendKeysUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<WalletKeys>(`${this.basePath}/wallet/getSpendKeys`,
            userAddress,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find the transactions for the address
     * Find the transactions for the address.
     * @param coinType coinType
     * @param userAddress userAddress
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTransactionsForAddressUsingPOST(coinType: string, userAddress: UserAddress, observe?: 'body', reportProgress?: boolean): Observable<TransactionsResponse>;
    public getTransactionsForAddressUsingPOST(coinType: string, userAddress: UserAddress, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TransactionsResponse>>;
    public getTransactionsForAddressUsingPOST(coinType: string, userAddress: UserAddress, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TransactionsResponse>>;
    public getTransactionsForAddressUsingPOST(coinType: string, userAddress: UserAddress, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (coinType === null || coinType === undefined) {
            throw new Error('Required parameter coinType was null or undefined when calling getTransactionsForAddressUsingPOST.');
        }
        if (userAddress === null || userAddress === undefined) {
            throw new Error('Required parameter userAddress was null or undefined when calling getTransactionsForAddressUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TransactionsResponse>(`${this.basePath}/wallet/getTransactionsForAddress/${encodeURIComponent(String(coinType))}`,
            userAddress,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
